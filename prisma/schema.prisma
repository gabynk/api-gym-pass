// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GlobalRole {
  ADMIN
  USER
}

enum GymRole {
  ADMIN
  STAFF
  MEMBER
}

enum Status {
  ACTIVE
  INACTIVE
  INVITED
}

model User {
  id                String     @id @default(uuid())
  name              String
  email             String     @unique
  password_hash     String?
  role              GlobalRole @default(USER)
  created_at        DateTime   @default(now())
  email_verified_at DateTime?

  checkIns             CheckIn[]
  refreshTokens        UserRefreshToken[] @relation("UserRefreshTokens")
  revokedRefreshTokens UserRefreshToken[] @relation("RefreshRevoker")
  membershipUser       Membership[]       @relation("MembershipUser")
  membershipCreatedBy  Membership[]       @relation("CreatedByUser")
  gym                  Gym[]

  @@map("users")
}

model CheckIn {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  validated_at DateTime?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  gym    Gym    @relation(fields: [gym_id], references: [id])
  gym_id String

  @@map("check_ins")
}

model Gym {
  id          String  @id @default(uuid())
  title       String
  description String?
  phone       String?
  latitude    Decimal
  longitude   Decimal

  created_by    User   @relation(fields: [created_by_id], references: [id])
  created_by_id String

  checkIns   CheckIn[]
  membership Membership[]

  @@map("gyms")
}

model Membership {
  id         String    @id @default(uuid())
  status     Status
  role       GymRole   @default(MEMBER)
  created_at DateTime  @default(now())
  left_at    DateTime?

  user    User   @relation("MembershipUser", fields: [user_id], references: [id])
  user_id String

  created_by    User   @relation("CreatedByUser", fields: [created_by_id], references: [id])
  created_by_id String

  gym    Gym    @relation(fields: [gym_id], references: [id])
  gym_id String

  @@unique([user_id, gym_id])
  @@map("membership")
}

model UserRefreshToken {
  id              String    @id @default(uuid())
  token_hash      String
  jti             String    @unique
  replaced_by_jti String?
  expires_at      DateTime
  revoked_at      DateTime?
  created_at      DateTime  @default(now())

  user    User   @relation("UserRefreshTokens", fields: [user_id], references: [id])
  user_id String

  revokedBy     User?   @relation("RefreshRevoker", fields: [revoked_by_id], references: [id])
  revoked_by_id String?

  @@map("user_refresh_token")
}
